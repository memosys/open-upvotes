generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:xewxep-nodcu0-jegfYh@db.tyiyihbqlribfgsozlcy.supabase.co:5432/postgres"
}

model Account {
  id                String  @id @default(cuid())
  compoundId        String  @unique @map(name: "compound_id")
  userId            String  @map(name: "user_id")
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map(name: "refresh_token")
  accessToken       String? @map(name: "access_token")
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @map(name: "id_token")
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map(name: "user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  ideas         Idea[]
  comments      Comment[]
  upvotes       Upvote[]

  createdAt DateTime @default(now())
  updatedAt DateTime?
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Upvote {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map(name: "user_id")
  idea      Idea     @relation(fields: [ideaId], references: [id])
  ideaId    Int      @map(name: "idea_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Idea {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  attachments Attachment[]
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String       @map(name: "author_id")
  upvotes     Upvote[]
  comments    Comment[]
  status      String       @default("Backlog")
  labels      Label[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @map(name: "author_id")
  idea      Idea     @relation(fields: [ideaId], references: [id])
  ideaId    Int      @map(name: "idea_id")
  hidden    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        Int      @id @default(autoincrement())
  url       String
  idea      Idea     @relation(fields: [ideaId], references: [id])
  ideaId    Int      @map(name: "idea_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Label {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Idea      Idea?    @relation(fields: [ideaId], references: [id])
  ideaId    Int?
}
