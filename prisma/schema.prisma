generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                String  @id @default(cuid())
//   compoundId        String  @unique @map(name: "compound_id")
//   userId            String  @map(name: "user_id")
//   type              String
//   provider          String
//   providerAccountId String
//   refreshToken      String? @map(name: "refresh_token")
//   accessToken       String? @map(name: "access_token")
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @map(name: "id_token")
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String   @map(name: "user_id")
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model Idea {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  user        User     @relation(fields: [user_id], references: [id])
  user_id     Int
  status      String
  labels      Label[]
  upvotes     Upvote[]
  createdAt   DateTime @default(now())

  comments    Comment[]
}

model Label {
  id        Int      @id @default(autoincrement())
  label     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int

  ideas     Idea[]
}

model Upvote {
  id        Int      @id @default(autoincrement())
  idea      Idea     @relation(fields: [idea_id], references: [id])
  idea_id   Int
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  time      DateTime
  comment   String
  idea      Idea     @relation(fields: [idea_id], references: [id])
  idea_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
}

model User {
  id       Int     @id @default(autoincrement())
  username String
  accounts String[]
  
  ideas    Idea[]
  labels   Label[]
  upvotes  Upvote[]
  comments Comment[]
}
